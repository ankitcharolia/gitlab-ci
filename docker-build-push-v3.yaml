default:
  tags:
    - gitlab-runner

stages: 
  - auth
  - build-and-push

gcp-auth: 
  image: "curlimages/curl:latest"

  variables:
    WORKLOAD_IDENTITY_PROVIDER: projects/907538893452/locations/global/workloadIdentityPools/gitlab/providers/gitlab-test
    SERVICE_ACCOUNT_EMAIL: gitlab-test@gcp-test.iam.gserviceaccount.com

  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://iam.googleapis.com/$WORKLOAD_IDENTITY_PROVIDER
  script: 
    - |      
        PAYLOAD=$(cat <<EOF
        {
        "audience": "//iam.googleapis.com/projects/${PROJECT_NUMBER}/locations/global/workloadIdentityPools/${POOL_ID}/providers/${PROVIDER_ID}",
        "grantType": "urn:ietf:params:oauth:grant-type:token-exchange",
        "requestedTokenType": "urn:ietf:params:oauth:token-type:access_token",
        "scope": "https://www.googleapis.com/auth/cloud-platform",
        "subjectTokenType": "urn:ietf:params:oauth:token-type:jwt",
        "subjectToken": "${CI_JOB_JWT_V2}"
        }
        EOF
        )

        FEDERATED_TOKEN=$(curl -X POST "https://sts.googleapis.com/v1/token" \
        --header "Accept: application/json" \
        --header "Content-Type: application/json" \
        --data "${PAYLOAD}" \
        | jq -r '.access_token'
        )

        ACCESS_TOKEN=$(curl -X POST "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${SERVICE_ACCOUNT_EMAIL}:generateAccessToken" \
        --header "Accept: application/json" \
        --header "Content-Type: application/json" \
        --header "Authorization: Bearer ${FEDERATED_TOKEN}" \
        --data '{"scope": ["https://www.googleapis.com/auth/cloud-platform"]}' \
        | jq -r '.accessToken'
        )
        echo "CLOUDSDK_AUTH_ACCESS_TOKEN=${ACCESS_TOKEN}" > token-${CI_JOB_ID}.env
  stage: auth
  artifacts:
    expire_in: 10 mins
    reports:
      dotenv: token-${CI_JOB_ID}.env

docker-build-and-push:
  stage: build-and-push
  image:
    name: docker:stable
  services:
    - name: docker:dind
      command: ["--tls=false"]

  variables:
    DOCKER_HOST: tcp://docker:2375/
    REGISTRY_HOST: europe-west3-docker.pkg.dev
    # Use the overlayfs driver for improved performance:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

  before_script:
    # Login to Google Cloud Registry
    - echo $CLOUDSDK_AUTH_ACCESS_TOKEN | docker login -u oauth2accesstoken --password-stdin https://$REGISTRY_HOST

  script:
    - docker build -t $REGISTRY_HOST/gcp-test/images/test-image:latest .
    - docker push $REGISTRY_HOST/gcp-test/images/test-image:latest